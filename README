TJA110X Linux Phy Driver Release v0.2 20170628 - User Notes
------------------------------------------------------------
Changelog
v0.1: (19.01.2017)
-Intitial release; support for TJA1100 and TJA1102

v0.2: (28.06.2017)
-Add support for TJA1100 phy with phyID 0x0180DC60, as used on the SJA1105 Application Board
-Add a new sysfs node in the configuration folder, that allows manipulation of the SNR warning limit, called snr_wlimit_cfg

v0.3: (12.10.2017)
-Support for TJA1101
-Set state of phydev to PHY_CHANGELINK, and update the linkstate member if link goes up or down. This notifies a connected netdevice of a linkstate
-Add verbosity parameter to conditionally show debug output
-Add a no_poll module parameter, that disables polling if it is given a nonzero value
-The TJA1102_p1 driver is only loaded, if the macro CONFIG_TJA1102_FIX is defined
-If the macro NETDEV_NOTIFICATION_FIX is defined, a netdevice_notifier is registered, that starts/stops polling according to the netdev state.
 This fixes an issue, where mdio read errors would occur, while the netdev was down.
-Bug fixes

------------------------------------------------------------
Table of Contents
1) TJA110X loading
2) TJA110X configuration management
3) TJA110X autonomous and managed mode
4) DTS Information
5) Compile time configuration
6) Limitations and known issues
-------------------------------------------------------------

1) TJA110X loading
- Load the kernel module: eg. "insmod tja110x.ko"
- Available module parameters are:
	- managed_mode: a nonzero value enables managed mode (see 3 for more information)
	- no_poll: a nonzero value disables polling of the Interrupt Status Register
	- verbosity: set verbosity level of debug messages. Possible values are between 0 (none) and 5 (all)

2) TJA110X configuration management
sysFS nodes are created in: /sys/bus/mdio_bus/devices/{devName}/configuration

	- cable_test	R: execute a cable test and return the result
			W: /

	- led_cfg	R: return the current led mode, one of {DISABLED, LINKUP, FRAMEREC, SYMERR, CRSSIG}
			W: set the led mode, with 0=DISABLED, 1=LINKUP, 2=FRAMEREC, 3=SYMERR, 4=CRSSIG

	- link_status	R: return the current link status, one of {up, down}
			W: /

	- loopback_cfg	R: return the current loopback mode, one of {LOOPBACK_DISABLED, INTERNAL_LOOPBACK, EXTERNAL_LOOPBACK, REMOTE_LOOPBACK}
			W: set the loopback mode, with 0=LOOPBACK_DISABLED, 1=INTERNAL_LOOPBACK, 2=EXTERNAL_LOOPBACK, 3=REMOTE_LOOPBACK

	- master_cfg	R: return the current master/slave configuration, one of {master, slave}
			W: set the master/slave configuration, with 0=slave, 1=master

	- power_cfg	R: return the current power mode, one of {POWER_MODE_NORMAL, POWER_MODE_SLEEPREQUEST, POWER_MODE_SLEEP, POWER_MODE_SILENT, POWER_MODE_STANDBY, POWER_MODE_NOCHANGE}
			W: initiate a power mode transition, with 0=SUSPEND, 1=RESUME, 2=SLEEPREQUEST, 3=WAKEUP

	- test_mode	R: return the current testmode mode, one of {NO_TMODE, TMODE1, TMODE2, TMODE3, TMODE4, TMODE5, TMODE6}
			W: set the testmode, with 0=NO_TMODE, 1=TMODE1, 2=TMODE2, 3=TMODE3, 4=TMODE4, 5=TMODE5, 6=TMODE6

	- wakeup_cfg	R: get the current wakeup configuration, one of: fwdphyloc[on/off], remwuphy[on/off], locwuphy[on/off], fwdphyrem[on/off]
			W: set the wakeup configuration: pass a hexadecimal number, the first four bits are interpreted as switches for the four configurable options
			    --> TJA1102: all four options are configurable separately
			    --> TJA1100: FWDPHYLOC MUST be off
			    		 REMWUPHY MUST be on
			    		 only LOCWUPHY and FWDPHYREM are configurable
			    		 Possible configurations:
			    		 - BOTH enabled (then led MUST be off)
			    		 - BOTH disabled (then led CAN be on)
			    		 all other configurations are invalid.

			    		 Therefore valid values to write to sysfs are:
			    		 - 2 (LOCWUPHY and FWDPHYREM off)
			    		 - E (LOCWUPHY and FWDPHYREM on)

	- snr_wlimit_cfg	R: return the current snr warning limit, one of {no fail limit, CLASS_A, CLASS_B, CLASS_C, CLASS_D, CLASS_E, CLASS_F, CLASS_G}
				W: set the loopback mode, with no 0=fail limit, 1=CLASS_A, 2=CLASS_B, 3=CLASS_C, 4=CLASS_D, 5=CLASS_E, 6=CLASS_F, 7=CLASS_G

3) TJA110X autonomous and managed mode
To choose between managed and autonomous mode, the kernel module parameter "managedMode" shall be used.
	- if managedMode is given a nonzero value(eg. "insmod nxp.ko managedMode=1"), the Phy operates in managed mode
	- if managedMode is set to zero (default value), the phy operates in autonomous mode. In autonomous mode, the following features are not available:
		- cable test
		- loopback modes
		- test modes
		- power modes (ie. the sleep, wakeup, suspend and resume commands)

4) DTS Information
- Autodetection of phys works, if the "ethernet" node does not have a "mdio" child-node with hardcoded "ethernet-phy" child-nodes. If present, only those hardcoded phys are used.
- The "reg" property of an "ethernet-phy" node determines the phy address used by the system.
- The "compatible" string of an "ethernet-phy" node determines the phy id (eg. the value of /sys/bus/mdio_bus/devices/<DEVICE>/phy_id).

5) Compile time configuration
- CONFIG_TJA1102_FIX: If this macro is defined, the TJA1102_p1 driver is loaded. It needs to be ensured, that no other mdio device with phy id 0 is present
- NETDEV_NOTIFICATION_FIX: If this macro is defined (and no_poll is not set), a netdevice_notifier is registered, that starts/stops polling according to the netdev state. Using the fix requires the following macros to be set:
	- MDIO_INTERFACE_NAME: Name of the network interface, that controlls the mdio bus, to which the phy(s) is/are connected to (for example "eth0")
	- MII_BUS_NAME: Name of the mdio bus, to which the phy(s) is/are connected to

6) Limitations and known issues
- The TJA1100 disables SMI when entering sleep. Once entered it can only be woken up by bus activity or via the WAKE pin

- MDIO Timeouts on interface down (for example on shutdown)
	Error message: "fec 2188000.ethernet eth0: MDIO read timeout" and "TJA1101 2188000.ethernet:06: read error: did_interrupt failed"
	The FEC driver (if used) is not designed to handle multiple PHYs. If an NETDEV_GOING_DOWN event is received (for example on shutdown or manual execution of "ifdown"),
	the FEC controlled MDIO-Bus "fec_enet_mii_bus" is deactivated, and the one (!) phy associated with the ethernet controller is stopped and possibly suspended.
	Every other phy connected to that bus however is not stopped, so polling continues which results in MDIO-timeouts
	A possible fix listens for this event, and manually stops NXP phys. However this is beyond the scope of a phy driver and requires knowledge of the interface name,
	that controls the MDIO-Bus (normally "eth0")

- If the SJA1105 driver is used, a load order has to be respected:
	load TJA110x FIRST, THEN SJA1105. Reason: phy_attach_direct() (used in SJA1105) checks if there is a driver loaded for the attaching phy,
	if not it assumes the genphy driver and binds it. As a result, the TJA110x driver will not be bound once loaded.
